// Code generated by mockery v1.0.0. DO NOT EDIT.

package groups

import mock "github.com/stretchr/testify/mock"

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: chatID, alias, user
func (_m *MockStore) AddUser(chatID string, alias string, user string) error {
	ret := _m.Called(chatID, alias, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(chatID, alias, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroup provides a mock function with given fields: chatID, alias
func (_m *MockStore) DeleteGroup(chatID string, alias string) error {
	ret := _m.Called(chatID, alias)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(chatID, alias)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserFromGroup provides a mock function with given fields: chatID, alias, user
func (_m *MockStore) DeleteUserFromGroup(chatID string, alias string, user string) error {
	ret := _m.Called(chatID, alias, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(chatID, alias, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroup provides a mock function with given fields: chatID, alias
func (_m *MockStore) GetGroup(chatID string, alias string) ([]string, error) {
	ret := _m.Called(chatID, alias)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(chatID, alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(chatID, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroups provides a mock function with given fields: chatID
func (_m *MockStore) GetGroups(chatID string) (map[string][]string, error) {
	ret := _m.Called(chatID)

	var r0 map[string][]string
	if rf, ok := ret.Get(0).(func(string) map[string][]string); ok {
		r0 = rf(chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutGroup provides a mock function with given fields: chatID, alias, users
func (_m *MockStore) PutGroup(chatID string, alias string, users []string) error {
	ret := _m.Called(chatID, alias, users)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string) error); ok {
		r0 = rf(chatID, alias, users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
